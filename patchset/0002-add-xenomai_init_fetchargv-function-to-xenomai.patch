From 2d702e75c173b44401a9c1bf57525aae49e8cf33 Mon Sep 17 00:00:00 2001
From: Norbert Lange <norbert.lange@andritz.com>
Date: Fri, 20 Apr 2018 14:59:02 +0200
Subject: [PATCH 2/7] add xenomai_init_fetchargv function to xenomai

this routine was previously linked into every
xenomai-application.
---
 include/xenomai/bootstrap-template.h | 12 +++---
 include/xenomai/init.h               |  3 ++
 lib/boilerplate/setup.c              | 62 ++++++++++++++++++++++++++++
 3 files changed, 72 insertions(+), 5 deletions(-)

diff --git a/include/xenomai/bootstrap-template.h b/include/xenomai/bootstrap-template.h
index 6c986e26e..aa2db931a 100644
--- a/include/xenomai/bootstrap-template.h
+++ b/include/xenomai/bootstrap-template.h
@@ -215,10 +215,6 @@ extern "C" {
 #endif
 
 #ifdef _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER
-/* allow defining a macro to wrap the regular main function in another file */
-#ifdef main
-#undef main
-#endif
 int _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER(int argc, char *const argv[])
 __attribute__((alias("xenomai_main"), weak));
 #endif
@@ -227,6 +223,9 @@ int _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER(int argc, char *const argv[]);
 
 __setup_section int xenomai_main(int argc, char *const argv[])
 {
+#ifdef trace_me
+    trace_me("xenomai_main entered");
+#endif
 	if (!early_argc)
 	{
 		xenomai_init(&argc, &argv);
@@ -234,7 +233,10 @@ __setup_section int xenomai_main(int argc, char *const argv[])
 		early_argc = argc;
 		early_argv = argv;
 	}
-	
+
+#if defined(trace_me) && defined(__stringify)
+	trace_me("xenomai_main call %s", __stringify(_XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER));
+#endif
 	return _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER(early_argc, early_argv);
 }
 #endif /* ifdef _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER */
diff --git a/include/xenomai/init.h b/include/xenomai/init.h
index 1cffa6f17..2a241aa3b 100644
--- a/include/xenomai/init.h
+++ b/include/xenomai/init.h
@@ -31,6 +31,9 @@ void xenomai_init_dso(int *argcp, char *const **argvp);
 
 int xenomai_bootstrap_getargv(int *argc, char *const** argv);
 
+int xenomai_init_fetchargv(int *argcp, char *const **argvp);
+#define _XENOMAI_INIT_HASFETCHARGV
+
 int xenomai_main(int argc, char *const argv[]);
 
 void xenomai_usage(void);
diff --git a/lib/boilerplate/setup.c b/lib/boilerplate/setup.c
index 7c83dc9fe..cf184ffee 100644
--- a/lib/boilerplate/setup.c
+++ b/lib/boilerplate/setup.c
@@ -23,6 +23,7 @@
 #include <errno.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <fcntl.h>
 #include <ctype.h>
 #include <memory.h>
 #include <malloc.h>
@@ -708,3 +709,64 @@ __cold_section const char *get_program_name(void)
 {
 	return basename(__base_setup_data.arg0 ?: "program");
 }
+
+int xenomai_init_fetchargv(int *argcp, char *const **argvp)
+{
+	char *arglist, *argend, *p, **v;
+	ssize_t len, ret;
+	int fd, n;
+
+	len = 1024;
+
+	for (;;) {
+		fd = open("/proc/self/cmdline", O_RDONLY);
+		if (fd < 0)
+			return -1;
+
+		arglist = malloc(len);
+		if (arglist == NULL) {
+			close(fd);
+			return -1;
+		}
+
+		ret = read(fd, arglist, len);
+		close(fd);
+
+		if (ret < 0) {
+			free(arglist);
+			return -1;
+		}
+
+		if (ret < len)
+			break;
+
+		free(arglist);
+		len <<= 1;
+	}
+
+	argend = arglist + ret;
+	p = arglist;
+	n = 0;
+	while (p < argend) {
+		n++;
+		p += strlen(p) + 1;
+	}
+
+	v = malloc((n + 1) * sizeof(char *));
+	if (v == NULL) {
+		free(arglist);
+		return -1;
+	}
+
+	p = arglist;
+	n = 0;
+	while (p < argend) {
+		v[n++] = p;
+		p += strlen(p) + 1;
+	}
+
+	v[n] = NULL;
+	*argcp = n;
+	*argvp = v;
+	return 0;
+}
-- 
2.17.1

