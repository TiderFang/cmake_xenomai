From 8b4bb89a622c2b41db5436765bcf571236da6a67 Mon Sep 17 00:00:00 2001
From: Norbert Lange <norbert.lange@andritz.com>
Date: Tue, 23 Oct 2018 15:39:12 +0200
Subject: [PATCH 3/5] add an extensible xenomai_init function

this should simplify passing options to the init routine.

Signed-off-by: Norbert Lange <norbert.lange@andritz.com>
---
 include/xenomai/bootstrap-template.h | 38 +++++++++++++++++++++----
 include/xenomai/init.h               |  2 ++
 lib/boilerplate/setup.c              | 42 ++++++++++++++++++++--------
 3 files changed, 64 insertions(+), 18 deletions(-)

diff --git a/include/xenomai/bootstrap-template.h b/include/xenomai/bootstrap-template.h
index 990c90d7c..9c61c93a0 100644
--- a/include/xenomai/bootstrap-template.h
+++ b/include/xenomai/bootstrap-template.h
@@ -204,6 +204,34 @@ extern "C" {
 #endif
 #endif
 
+static void call_xenomai_init(int *argcp, char *const **argvp)
+{
+#if !defined(_XENOMAI_BOOTSTRAP_INITFLAGS) && !defined(_XENOMAI_BOOTSTRAP_MODNAME)
+	/* prefer previously existing functions for better backwards capability */
+# ifdef _XENOMAI_BOOTSTRAP_DSO
+	xenomai_init_dso(argcp, argvp);
+# else
+	xenomai_init(argcp, argvp);
+# endif
+
+#else
+	int isDso = 0;
+	unsigned long long bflags = 0;
+	const char *modname = NULL;
+# ifdef _XENOMAI_BOOTSTRAP_DSO
+	isDso = 1;
+# endif
+# ifdef _XENOMAI_BOOTSTRAP_INITFLAGS
+	bflags = _XENOMAI_BOOTSTRAP_INITFLAGS;
+# endif
+# ifdef _XENOMAI_BOOTSTRAP_MODNAME
+	modname = _XENOMAI_BOOTSTRAP_MODNAME;
+# endif
+	xenomai_init_ext(argcp, argvp, isDso, modname, bflags);
+#endif
+}
+
+
 /** Bootstrap: handle commandline args and call xenomai's init
  *
  * glibc calls constructors/destructors with the argv vector,
@@ -226,11 +254,8 @@ __bootstrap_ctor static void xenomai_bootstrap(void)
 		return;
 #endif
 
-#ifdef _XENOMAI_BOOTSTRAP_DSO
-	xenomai_init_dso(&argc, &argv);
-#else
-	xenomai_init(&argc, &argv);
-#endif
+	call_xenomai_init(&argc, &argv);
+
 	early_argc = argc;
 	early_argv = argv;
 }
@@ -256,7 +281,8 @@ int xenomai_main(int argc, char *const argv[])
 #endif
 	if (!early_argc)
 	{
-		xenomai_init(&argc, &argv);
+		call_xenomai_init(&argc, &argv);
+
 		/* State should be identical to using the constructor function */
 		early_argc = argc;
 		early_argv = argv;
diff --git a/include/xenomai/init.h b/include/xenomai/init.h
index 77507a7d5..3f69e799c 100644
--- a/include/xenomai/init.h
+++ b/include/xenomai/init.h
@@ -35,6 +35,8 @@ void xenomai_init(int *argcp, char *const **argvp);
 
 void xenomai_init_dso(int *argcp, char *const **argvp);
 
+void xenomai_init_ext(int *argcp, char *const **argvp, int isDso, const char *modname, unsigned long flags);
+
 int xenomai_main(int argc, char *const argv[]);
 
 void xenomai_usage(void);
diff --git a/lib/boilerplate/setup.c b/lib/boilerplate/setup.c
index 59dfe0c03..0b32306db 100644
--- a/lib/boilerplate/setup.c
+++ b/lib/boilerplate/setup.c
@@ -518,7 +518,7 @@ static int parse_setup_options(int *argcp, char **uargv,
 	return 0;
 }
 
-static void __xenomai_init(int *argcp, char *const **argvp, const char *me)
+static void __xenomai_init(int *argcp, char *const **argvp, const char *me, unsigned long flags)
 {
 	struct setup_descriptor *setup;
 	int ret, base_opt_start;
@@ -570,6 +570,9 @@ static void __xenomai_init(int *argcp, char *const **argvp, const char *me)
 	if (ret)
 		goto fail;
 
+	if (!me)
+		me = get_program_name();
+
 	trace_me("cold init from %s", me);
 	
 #ifndef CONFIG_SMP
@@ -673,25 +676,40 @@ fail:
 	early_panic("initialization failed, %s", symerror(ret));
 }
 
-void xenomai_init(int *argcp, char *const **argvp)
+static void _xenomai_init_ext(int *argcp, char *const **argvp, int isDso, const char *modname, unsigned long flags)
 {
-	const char *me = get_program_name();
+	const char *me = "DSO";
+	if (isDso)
+	{
+		__xenomai_init(argcp, argvp, me, flags);
+	} else
+	{
+		if (main_init_done) {
+			early_warning("duplicate call from main program "
+				      "to %s() ignored", __func__);
+			early_warning("(xeno-config --no-auto-init disables implicit call)");
+		}
 
-	if (main_init_done) {
-		early_warning("duplicate call from main program "
-			      "to %s() ignored", __func__);
-		early_warning("(xeno-config --no-auto-init disables implicit call)");
+		__xenomai_init(argcp, argvp, NULL, flags);
+		main_init_done = 1;
+		me = get_program_name();
 	}
-
-	__xenomai_init(argcp, argvp, me);
-	main_init_done = 1;
 	trace_me("%s bootstrap done", me);
 }
 
+void xenomai_init_ext(int *argcp, char *const **argvp, int isDso, const char *modname, unsigned long flags)
+{
+	_xenomai_init_ext(argcp, argvp, isDso, modname, flags);
+}
+
+void xenomai_init(int *argcp, char *const **argvp)
+{
+	_xenomai_init_ext(argcp, argvp, 0, NULL, 0);
+}
+
 void xenomai_init_dso(int *argcp, char *const **argvp)
 {
-	__xenomai_init(argcp, argvp, "DSO");
-	trace_me("DSO bootstrap done");
+	_xenomai_init_ext(argcp, argvp, 1, NULL, 0);
 }
 
 void __trace_me(const char *fmt, ...)
-- 
2.19.2

