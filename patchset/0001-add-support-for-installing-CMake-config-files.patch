From 329fd35795efb5263ed1e00a2bb56e897224fb8c Mon Sep 17 00:00:00 2001
From: Norbert Lange <norbert.lange@andritz.com>
Date: Tue, 22 May 2018 14:52:15 +0200
Subject: [PATCH] add support for installing CMake config files

---
 configure.ac                                  |   8 +
 utils/Makefile.am                             |   2 +-
 utils/cmake/Makefile.am                       |  14 +
 utils/cmake/bootstrap-template.h              | 321 ++++++++++++++++++
 .../cobalt/xenomai-targets-noconfig.cmake.in  |  79 +++++
 utils/cmake/cobalt/xenomai-targets.cmake.in   | 165 +++++++++
 utils/cmake/install_cmakeconfig.sh            | 141 ++++++++
 .../mercury/xenomai-targets-noconfig.cmake.in |  69 ++++
 utils/cmake/mercury/xenomai-targets.cmake.in  | 157 +++++++++
 utils/cmake/xenomai-config-version.cmake.in   |  31 ++
 utils/cmake/xenomai-config.cmake.in           |  45 +++
 utils/cmake/xenomai-macros.cmake.in           | 134 ++++++++
 12 files changed, 1165 insertions(+), 1 deletion(-)
 create mode 100644 utils/cmake/Makefile.am
 create mode 100644 utils/cmake/bootstrap-template.h
 create mode 100644 utils/cmake/cobalt/xenomai-targets-noconfig.cmake.in
 create mode 100644 utils/cmake/cobalt/xenomai-targets.cmake.in
 create mode 100755 utils/cmake/install_cmakeconfig.sh
 create mode 100644 utils/cmake/mercury/xenomai-targets-noconfig.cmake.in
 create mode 100644 utils/cmake/mercury/xenomai-targets.cmake.in
 create mode 100644 utils/cmake/xenomai-config-version.cmake.in
 create mode 100644 utils/cmake/xenomai-config.cmake.in
 create mode 100644 utils/cmake/xenomai-macros.cmake.in

diff --git a/configure.ac b/configure.ac
index b8fd2fbed..97e7c12eb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -516,6 +516,12 @@ fi
 
 test x$CONFIG_XENO_VALGRIND_API = xy && AC_DEFINE(CONFIG_XENO_VALGRIND_API,1,[config])
 
+dnl Create a variable needed for later substition 
+AC_CHECK_SIZEOF([void *])
+AC_SUBST(CMAKE_SIZEOF_VOID_P, $ac_cv_sizeof_void_p)
+
+AC_SUBST(CMAKE_VERSION_CODE, $version_code)
+
 dnl Check for obstack support in *libc
 AC_CHECK_HEADERS(obstack.h,libc_has_obstack=y)
 AM_CONDITIONAL(XENO_PRIVATE_OBSTACK,[test x$libc_has_obstack = x])
@@ -976,6 +982,8 @@ AC_CONFIG_FILES([ \
 	utils/Makefile \
 	utils/hdb/Makefile \
 	utils/can/Makefile \
+	utils/cmake/Makefile \
+	utils/cmake/xenomai-config-version.cmake \
 	utils/analogy/Makefile \
 	utils/ps/Makefile \
 	utils/slackspot/Makefile \
diff --git a/utils/Makefile.am b/utils/Makefile.am
index 81dbfda7c..56e18402d 100644
--- a/utils/Makefile.am
+++ b/utils/Makefile.am
@@ -1,4 +1,4 @@
-SUBDIRS = hdb
+SUBDIRS = cmake hdb
 if XENO_COBALT
 SUBDIRS += analogy autotune can net ps slackspot corectl
 endif
diff --git a/utils/cmake/Makefile.am b/utils/cmake/Makefile.am
new file mode 100644
index 000000000..8c6b249f2
--- /dev/null
+++ b/utils/cmake/Makefile.am
@@ -0,0 +1,14 @@
+build-stamp:
+	sh $(srcdir)/install_cmakeconfig.sh --with-core=$(XENO_TARGET_CORE) --prefix="$(prefix)" \
+	  --exec-prefix="$(exec_prefix)" --libdir="$(libdir)" --includedir="$(includedir)" . && \
+	touch $@
+
+xenomai-config.cmake xenomai-macros.cmake \
+	xenomai-targets.cmake xenomai-targets-noconfig.cmake: build-stamp
+
+cmakeconfigdir = $(libdir)/cmake/$(PACKAGE)
+cmakeconfig_DATA = xenomai-config.cmake xenomai-macros.cmake xenomai-config-version.cmake \
+	xenomai-targets.cmake xenomai-targets-noconfig.cmake
+
+CLEANFILES = build-stamp xenomai-config.cmake xenomai-config-version.cmake xenomai-macros.cmake \
+	xenomai-targets.cmake xenomai-targets-noconfig.cmake
diff --git a/utils/cmake/bootstrap-template.h b/utils/cmake/bootstrap-template.h
new file mode 100644
index 000000000..b40dfa1e0
--- /dev/null
+++ b/utils/cmake/bootstrap-template.h
@@ -0,0 +1,321 @@
+/*
+ * The source code in this particular file is released using a dual
+ * license scheme.  You can choose the licence that better fits your
+ * requirements.
+ *
+ * -----------------------------------------------------------------------
+ *
+ * Copyright (C) 2017 Philippe Gerum <rpm@xenomai.org>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * "Software"), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included
+ * in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * -----------------------------------------------------------------------
+ *
+ * Copyright (C) 2013 Philippe Gerum <rpm@xenomai.org>.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
+ */
+
+/* @file bootstrap-template.h
+ * @brief Template header for bootstrap code
+ *
+ * The bootstrap code is configurable and is supposed to
+ * create a small routine that is called before other
+ * automatic GCC/C++ constructors are executed,
+ * as well as the regular main() routine.
+ *
+ * At its minimum it defines a constructor that calls
+ * a xenomai_init variant,
+ * and a function to retrieve the modified argv vector.
+ *
+ * Additionally a wrapper for the main() routine can be defined.
+ * Related Macros allow to specify the name of the wrapper.
+ *
+ * Look into lib/boilerplate/init for usecases covering
+ * shared libraries and executables usind the auto-init feature.
+ *
+ * Special handling for glibc can be enabled.
+ * This library will pass the argv vector to constructor
+ * function, thus allowing easy access to the commandline.
+ *
+ * Macros affecting the defined functionality:
+ *
+ * _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS
+ *                  Use glibc constructor signature (if glibc detected)
+ * _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL
+ *                  *Force* glibc constructor signature on/off (value 1/0)
+ * _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER
+ *                  Define a main function, calling the macro expression
+ * _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER
+ *                  Set a weak reference to the defined main function
+ * _XENOMAI_BOOTSTRAP_DSO
+ *                  Should be defined when building shared libraries
+ */
+
+#include <xenomai/init.h>
+
+/* if requested by _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS,
+ * test if macros for glibc are defined and
+ * define _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL accordingly */
+#if !defined(_XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL) &&                    \
+        defined(_XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS)
+#if defined(__GLIBC__) && !defined(__UCLIBC__)
+#define _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL 1
+#endif
+#endif
+
+/* declare C Functions as such */
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+void xenomai_init(int *argcp, char *const **argvp);
+int xenomai_main(int argc, char *const argv[]);
+
+int xenomai_bootstrap_getargv(int *argc, char *const **argv);
+
+#ifdef _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER
+int _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER(int argc, char *const argv[]);
+#endif
+
+#if defined(_XENOMAI_INIT_HASFETCHARGV)
+#define _xenomai_init_fetchargv(a, v) xenomai_init_fetchargv((a), (v))
+#else
+__attribute__((unused,always_inline))
+static __inline__ int _xenomai_init_fetchargv(int *argcp, char *const **argvp);
+#endif
+
+#ifndef __bootstrap_ctor
+#define __bootstrap_ctor __attribute__((constructor(220)))
+#endif
+
+static struct xbootstrap_state {
+	int argc;
+	char *const *argv;
+} early_args;
+
+#ifdef __cplusplus
+}
+#endif
+
+/* @brief get the potentially argv vector
+ *
+ * The xenomai init code modifies the argv vector,
+ * this function allows to retrive this vector later.
+ */
+int xenomai_bootstrap_getargv(int *argc, char *const **argv)
+{
+	if (early_args.argc) {
+		*argc = early_args.argc;
+		*argv = early_args.argv;
+		return 1;
+	}
+	return 0;
+}
+
+static __inline__ void _xenomai_bootstrap_setargv(int argc, char *const *argv)
+{
+	early_args.argc = argc;
+	early_args.argv = argv;
+}
+
+static __inline__ void call_xenomai_init(int *argcp, char *const **argvp)
+{
+#if !defined(_XENOMAI_BOOTSTRAP_INITFLAGS) &&                                  \
+        !defined(_XENOMAI_BOOTSTRAP_MODNAME)
+	/* prefer previously existing functions for better backwards capability */
+#ifdef _XENOMAI_BOOTSTRAP_DSO
+	xenomai_init_dso(argcp, argvp);
+#else
+	xenomai_init(argcp, argvp);
+#endif
+
+#else
+	int isDso = 0;
+	unsigned long long bflags = 0;
+	const char *modname = NULL;
+#ifdef _XENOMAI_BOOTSTRAP_DSO
+	isDso = 1;
+#endif
+#ifdef _XENOMAI_BOOTSTRAP_INITFLAGS
+	bflags = _XENOMAI_BOOTSTRAP_INITFLAGS;
+#endif
+#ifdef _XENOMAI_BOOTSTRAP_MODNAME
+	modname = _XENOMAI_BOOTSTRAP_MODNAME;
+#endif
+	xenomai_init_ext(argcp, argvp, isDso, modname, bflags);
+#endif
+
+	_xenomai_bootstrap_setargv(*argcp, *argvp);
+}
+
+/** Bootstrap: handle commandline args and call xenomai's init
+ *
+ * glibc calls constructors/destructors with the argv vector,
+ * which is nice as this avoids some code.
+ * Other C-libraries don't, and worse: define __GLIBC__
+ * This probably should be an explicit opt-in
+ */
+#if _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL == 1
+__bootstrap_ctor __attribute__((cold))
+static void xenomai_bootstrap(int argc, char *const argv[],
+                                               char *const envp[])
+{
+	(void)envp;
+	call_xenomai_init(&argc, &argv);
+}
+#else
+__bootstrap_ctor __attribute__ ((cold))
+static void xenomai_bootstrap(void)
+{
+	char *const *argv;
+	int argc;
+	if (_xenomai_init_fetchargv(&argc, &argv) != 0)
+		return;
+
+	call_xenomai_init(&argc, &argv);
+}
+#endif
+
+/* If requested, we define the main function,
+   and weak refs */
+#ifdef _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER
+#ifdef _XENOMAI_BOOTSTRAP_DSO
+#error "Main wrapper is not allowed for shared libraries"
+#endif
+int _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER(int argc, char *const argv[]);
+
+int xenomai_main(int argc, char *const argv[])
+{
+#ifdef trace_me
+	trace_me("xenomai_main entered");
+#endif
+
+	if (!xenomai_bootstrap_getargv(&argc, &argv)) {
+		call_xenomai_init(&argc, &argv);
+	}
+
+#if defined(trace_me) && defined(__stringify)
+	trace_me("xenomai_main call %s",
+	         __stringify(_XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER));
+#endif
+	return _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER(argc, argv);
+}
+
+#ifdef _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER
+int _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER(int argc, char *const argv[])
+        __attribute__((alias("xenomai_main"), weak));
+#endif /* ifdef _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER */
+#endif /* ifdef _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER */
+
+/* if needed and not in the DSO, then
+ * define a function for fetching the commandline arguments
+ */
+#if !defined(_XENOMAI_INIT_HASFETCHARGV) &&                                    \
+        (!defined(_XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL) ||               \
+         _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS_REAL != 1)
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+
+/* only needed if the modecheck wrappers are active */
+#ifdef _XENOMAI_BOOTSTRAP_WRAP_MALLOC
+#define _WRM(x) __STD(x)
+#else
+#define _WRM(x) x
+#endif
+
+
+__attribute__((cold)) int _xenomai_init_fetchargv(int *argcp, char *const **argvp)
+{
+	char *arglist, *argend, *p, **v;
+	ssize_t len, ret;
+	int fd, n;
+
+	len = 1024;
+
+	for (;;) {
+		fd = __STD(open("/proc/self/cmdline", O_RDONLY));
+		if (fd < 0)
+			return -1;
+
+		arglist = (char*)_WRM(malloc(len));
+		if (arglist == NULL) {
+			__STD(close(fd));
+			return -1;
+		}
+
+		ret = __STD(read(fd, arglist, len));
+		__STD(close(fd));
+
+		if (ret < 0) {
+			__STD(free(arglist));
+			return -1;
+		}
+
+		if (ret < len)
+			break;
+
+		__STD(free(arglist));
+		len <<= 1;
+	}
+
+	argend = arglist + ret;
+	p = arglist;
+	n = 0;
+	while (p < argend) {
+		n++;
+		p += strlen(p) + 1;
+	}
+
+	v = (char**)_WRM(malloc((n + 1) * sizeof(char *)));
+	if (v == NULL) {
+		__STD(free(arglist));
+		return -1;
+	}
+
+	p = arglist;
+	n = 0;
+	while (p < argend) {
+		v[n++] = p;
+		p += strlen(p) + 1;
+	}
+
+	v[n] = NULL;
+	*argcp = n;
+	*argvp = v;
+	return 0;
+}
+#endif
diff --git a/utils/cmake/cobalt/xenomai-targets-noconfig.cmake.in b/utils/cmake/cobalt/xenomai-targets-noconfig.cmake.in
new file mode 100644
index 000000000..4e519f646
--- /dev/null
+++ b/utils/cmake/cobalt/xenomai-targets-noconfig.cmake.in
@@ -0,0 +1,79 @@
+#----------------------------------------------------------------
+# Generated CMake target import file.
+#----------------------------------------------------------------
+
+# Commands may need to know the format version.
+set(CMAKE_IMPORT_FILE_VERSION 1)
+
+# Import target "Xenomai::cobalt" for configuration ""
+set_property(TARGET Xenomai::cobalt APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::cobalt PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libcobalt.so"
+  IMPORTED_SONAME_NOCONFIG "libcobalt.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::cobalt )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::cobalt "${_IMPORT_PREFIX}/${_xenomai_libdir}/libcobalt.so" )
+
+# Import target "Xenomai::modechk" for configuration ""
+set_property(TARGET Xenomai::modechk APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::modechk PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libmodechk.so"
+  IMPORTED_SONAME_NOCONFIG "libmodechk.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::modechk )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::modechk "${_IMPORT_PREFIX}/${_xenomai_libdir}/libmodechk.so" )
+
+# Import target "Xenomai::copperplate" for configuration ""
+set_property(TARGET Xenomai::copperplate APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::copperplate PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libcopperplate.so"
+  IMPORTED_SONAME_NOCONFIG "libcopperplate.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::copperplate )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::copperplate "${_IMPORT_PREFIX}/${_xenomai_libdir}/libcopperplate.so" )
+
+# Import target "Xenomai::vxworks" for configuration ""
+set_property(TARGET Xenomai::vxworks APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::vxworks PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libvxworks.so"
+  IMPORTED_SONAME_NOCONFIG "libvxworks.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::vxworks )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::vxworks "${_IMPORT_PREFIX}/${_xenomai_libdir}/libvxworks.so" )
+
+# Import target "Xenomai::psos" for configuration ""
+set_property(TARGET Xenomai::psos APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::psos PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libpsos.so"
+  IMPORTED_SONAME_NOCONFIG "libpsos.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::psos )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::psos "${_IMPORT_PREFIX}/${_xenomai_libdir}/libpsos.so" )
+
+# Import target "Xenomai::alchemy" for configuration ""
+set_property(TARGET Xenomai::alchemy APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::alchemy PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libalchemy.so"
+  IMPORTED_SONAME_NOCONFIG "libalchemy.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::alchemy )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::alchemy "${_IMPORT_PREFIX}/${_xenomai_libdir}/libalchemy.so" )
+
+# Import target "Xenomai::smokey" for configuration ""
+set_property(TARGET Xenomai::smokey APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::smokey PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libsmokey.so"
+  IMPORTED_SONAME_NOCONFIG "libsmokey.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::smokey )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::smokey "${_IMPORT_PREFIX}/${_xenomai_libdir}/libsmokey.so" )
+
+# Commands beyond this point should not need to know the version.
+set(CMAKE_IMPORT_FILE_VERSION)
diff --git a/utils/cmake/cobalt/xenomai-targets.cmake.in b/utils/cmake/cobalt/xenomai-targets.cmake.in
new file mode 100644
index 000000000..1448c2799
--- /dev/null
+++ b/utils/cmake/cobalt/xenomai-targets.cmake.in
@@ -0,0 +1,165 @@
+# Generated by CMake
+
+if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
+   message(FATAL_ERROR "CMake >= 2.6.0 required")
+endif()
+cmake_policy(PUSH)
+cmake_policy(VERSION 2.6)
+#----------------------------------------------------------------
+# Generated CMake target import file.
+#----------------------------------------------------------------
+
+# Commands may need to know the format version.
+set(CMAKE_IMPORT_FILE_VERSION 1)
+
+# Protect against multiple inclusion, which would fail when already imported targets are added once more.
+set(_targetsDefined)
+set(_targetsNotDefined)
+set(_expectedTargets)
+foreach(_expectedTarget Xenomai::cobalt Xenomai::modechk Xenomai::legacy_bootstrap Xenomai::legacy_bootstrap_wrap Xenomai::posix Xenomai::copperplate Xenomai::vxworks Xenomai::psos Xenomai::alchemy Xenomai::smokey)
+  list(APPEND _expectedTargets ${_expectedTarget})
+  if(NOT TARGET ${_expectedTarget})
+    list(APPEND _targetsNotDefined ${_expectedTarget})
+  endif()
+  if(TARGET ${_expectedTarget})
+    list(APPEND _targetsDefined ${_expectedTarget})
+  endif()
+endforeach()
+if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
+  unset(_targetsDefined)
+  unset(_targetsNotDefined)
+  unset(_expectedTargets)
+  set(CMAKE_IMPORT_FILE_VERSION)
+  cmake_policy(POP)
+  return()
+endif()
+if(NOT "${_targetsDefined}" STREQUAL "")
+  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
+endif()
+unset(_targetsDefined)
+unset(_targetsNotDefined)
+unset(_expectedTargets)
+
+
+# Compute the installation prefix relative to this file.
+get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_DIR}/../../@lib_to_prefix@" ABSOLUTE)
+if(_IMPORT_PREFIX STREQUAL "/")
+  set(_IMPORT_PREFIX "")
+endif()
+
+# Create imported target Xenomai::cobalt
+add_library(Xenomai::cobalt SHARED IMPORTED)
+
+set_target_properties(Xenomai::cobalt PROPERTIES
+  INTERFACE_COMPILE_DEFINITIONS "__COBALT__"
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/cobalt;${_IMPORT_PREFIX}/${_xenomai_includedir}"
+  INTERFACE_LINK_LIBRARIES "${_xenomai_threadlib};-lrt"
+)
+
+# Create imported target Xenomai::modechk
+add_library(Xenomai::modechk SHARED IMPORTED)
+
+set_target_properties(Xenomai::modechk PROPERTIES
+  INTERFACE_LINK_LIBRARIES "-Wl,@${_IMPORT_PREFIX}/${_xenomai_libdir}/modechk.wrappers;${_xenomai_threadlib};-lrt"
+)
+
+# Create imported target Xenomai::legacy_bootstrap
+add_library(Xenomai::legacy_bootstrap INTERFACE IMPORTED)
+
+set_target_properties(Xenomai::legacy_bootstrap PROPERTIES
+  INTERFACE_LINK_LIBRARIES "\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:${_IMPORT_PREFIX}/${_xenomai_libdir}/xenomai/bootstrap-pic.o>;\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:${_IMPORT_PREFIX}/${_xenomai_libdir}/xenomai/bootstrap.o>"
+)
+
+# Create imported target Xenomai::legacy_bootstrap_wrap
+add_library(Xenomai::legacy_bootstrap_wrap INTERFACE IMPORTED)
+
+set_target_properties(Xenomai::legacy_bootstrap_wrap PROPERTIES
+  INTERFACE_LINK_LIBRARIES "\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:-Wl,--wrap=main,--dynamic-list=${_IMPORT_PREFIX}/${_xenomai_libdir}/dynlist.ld>"
+)
+
+# Create imported target Xenomai::posix
+add_library(Xenomai::posix INTERFACE IMPORTED)
+
+set_target_properties(Xenomai::posix PROPERTIES
+  INTERFACE_COMPILE_DEFINITIONS "__COBALT_WRAP__"
+  INTERFACE_LINK_LIBRARIES "-Wl,@${_IMPORT_PREFIX}/${_xenomai_libdir}/cobalt.wrappers;Xenomai::cobalt"
+)
+
+# Create imported target Xenomai::copperplate
+add_library(Xenomai::copperplate SHARED IMPORTED)
+
+set_target_properties(Xenomai::copperplate PROPERTIES
+  INTERFACE_LINK_LIBRARIES "Xenomai::cobalt"
+)
+
+# Create imported target Xenomai::vxworks
+add_library(Xenomai::vxworks SHARED IMPORTED)
+
+set_target_properties(Xenomai::vxworks PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/vxworks"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+# Create imported target Xenomai::psos
+add_library(Xenomai::psos SHARED IMPORTED)
+
+set_target_properties(Xenomai::psos PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/psos"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+# Create imported target Xenomai::alchemy
+add_library(Xenomai::alchemy SHARED IMPORTED)
+
+set_target_properties(Xenomai::alchemy PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/alchemy"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+# Create imported target Xenomai::smokey
+add_library(Xenomai::smokey SHARED IMPORTED)
+
+set_target_properties(Xenomai::smokey PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/smokey"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+if(CMAKE_VERSION VERSION_LESS 3.0.0)
+  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
+endif()
+
+# Load information for each installed configuration.
+get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+file(GLOB CONFIG_FILES "${_DIR}/xenomai-targets-*.cmake")
+foreach(f ${CONFIG_FILES})
+  include(${f})
+endforeach()
+
+# Cleanup temporary variables.
+set(_IMPORT_PREFIX)
+
+# Loop over all imported files and verify that they actually exist
+foreach(target ${_IMPORT_CHECK_TARGETS} )
+  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
+    if(NOT EXISTS "${file}" )
+      message(FATAL_ERROR "The imported target \"${target}\" references the file
+   \"${file}\"
+but this file does not exist.  Possible reasons include:
+* The file was deleted, renamed, or moved to another location.
+* An install or uninstall procedure did not complete successfully.
+* The installation package was faulty and contained
+   \"${CMAKE_CURRENT_LIST_FILE}\"
+but not all the files it references.
+")
+    endif()
+  endforeach()
+  unset(_IMPORT_CHECK_FILES_FOR_${target})
+endforeach()
+unset(_IMPORT_CHECK_TARGETS)
+
+# This file does not depend on other imported targets which have
+# been exported from the same project but in a separate export set.
+
+# Commands beyond this point should not need to know the version.
+set(CMAKE_IMPORT_FILE_VERSION)
+cmake_policy(POP)
diff --git a/utils/cmake/install_cmakeconfig.sh b/utils/cmake/install_cmakeconfig.sh
new file mode 100755
index 000000000..afef4b17d
--- /dev/null
+++ b/utils/cmake/install_cmakeconfig.sh
@@ -0,0 +1,141 @@
+#!/bin/sh
+set -e
+set -u
+SRCDIR=$(dirname "$(readlink -f "$0")")
+printusage() {
+cat << EOF
+Usage: "$(basename $0)" [OPTION]... [--] TARGETPATH
+
+Installs the CMake config files for Xenomai,
+TARGETPATH should be the installed '<libpath>/cmake/xenomai'
+of your installation.
+
+Options:
+  --with-core=<cobalt | mercury>
+                          build for dual kernel or single image
+
+  --prefix=PREFIX         install architecture-independent files in PREFIX
+                          [/usr/xenomai]
+  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
+                          [PREFIX]
+
+  --libdir=DIR            object code libraries [EPREFIX/lib]
+  --includedir=DIR        C header files [PREFIX/include]
+
+  --version=VER           Xenomai version, will attempt to autodetect
+                          from header INCLUDEDIR/xeno_config.h
+  --bitness=SIZEOFVP      Target size-of-void-pointer
+EOF
+  if [ -n "$1" ]; then exit $1; fi
+}
+
+
+TMP="`getopt -s sh -o '' --long with-core:,prefix:,exec-prefix:,libdir:,includedir:,version:,bitness: -n "$(basename $0)" -- "$@"`"
+if [ $? != 0 ] ; then
+  printusage 1>&2 1
+fi
+
+eval set -- "$TMP"
+
+core=cobalt
+prefix=/usr/xenomai
+exec_prefix='${prefix}'
+libdir='${exec_prefix}'/lib
+includedir='${prefix}'/include
+version='@CMAKE_VERSION_CODE@'
+bitness=
+do_version=
+has_bitness=
+
+while true ; do
+  case "$1" in
+    --with-core) core=$2; shift ;;
+    --prefix) prefix=$2; shift ;;
+    --exec-prefix) exec_prefix=$2; shift ;;
+    --libdir) libdir=$2; shift ;;
+    --includedir) includedir=$2; shift ;;
+    --version) version=$2; do_version=1; shift ;;
+    --bitness) bitness=$2; has_bitness=1; shift ;;
+
+    --help) printusage; exit 0 ;;
+    --) shift ; break ;;
+    *) echo "$(basename $0): Script Error" 1>&2 ; exit 1 ;;
+  esac
+  shift
+done
+
+# [ -z "$do_version" ] || [ -n "$has_bitness" ] || { echo "Need to define bitness if version is set" 1>&2; printusage 1; }
+
+[ -d "${1-}" ] || { echo "No valid TARGETPATH" 1>&2; printusage 1; }
+targetpath=$1; shift
+
+# make simple absolute paths from the variables
+derefvar() {
+  local var last
+  var=$1
+  last="x$1"
+  while [ "$var" != "$last" ]; do
+    last=$var
+    var=$(eval "printf '%s' \"$var\"")
+  done
+  printf '%s' "$var"
+}
+
+# create relative path
+torelpath() {
+  local target common_part forward_part result
+  target=${2}
+
+  common_part=${1}
+  result=
+
+  test "x${common_part}" != "x" && test "x${target}" != "x" || return
+
+  while test "x${target#$common_part}" = "x${target}"; do
+      common_part=`dirname "$common_part"`
+      result="../${result}"
+  done
+
+  forward_part=${target#${common_part}}
+  forward_part=${forward_part#/}
+
+  result="${result}${forward_part}"
+  result=${result%/}
+
+  printf '%s' "${result}"
+}
+
+prefix=$(derefvar "$prefix")
+libdir=$(derefvar "$libdir")
+includedir=$(derefvar "$includedir")
+
+lib_to_prefix=$(torelpath "$libdir" "$prefix")
+libdir_rel=$(torelpath "$prefix" "$libdir")
+includedir_rel=$(torelpath "$prefix" "$includedir")
+
+core_upper=$(printf "%s" $core | tr '[a-z]' '[A-Z]')
+
+if [ -z "$do_version" ]; then
+  autodetect_version=$(sed 2>/dev/null -n 's,.*\bVERSION[[:space:]"]*\([^[:space:]"]*\).*,\1,p' "$includedir"/xeno_config.h) &&
+    { version=$autodetect_version; do_version=1; } || :
+fi
+
+TEMPDIR=$(mktemp -d); trap "rm -rf $TEMPDIR" 0
+(
+  cd "$SRCDIR"
+for template in ${core}/xenomai-targets.cmake.in ${core}/xenomai-targets-noconfig.cmake.in xenomai-config.cmake.in xenomai-macros.cmake.in bootstrap-template.h ${do_version:+xenomai-config-version.cmake.in}; do
+  tname=${template%.in}
+  tname=${tname##*/}
+  sed -e 's,@core@,'"$core"',g' \
+    -e 's,@core_upper@,'"$core_upper"',g' \
+    -e 's,@prefix@,'"$prefix"',g' \
+    -e 's,@libdir@,'"$libdir"',g' \
+    -e 's,@includedir@,'"$includedir"',g' \
+    -e 's,@lib_to_prefix@,'"$lib_to_prefix"',g' \
+    -e 's,@libdir_rel@,'"$libdir_rel"',g' \
+    -e 's,@includedir_rel@,'"$includedir_rel"',g' \
+    -e 's,@CMAKE_VERSION_CODE@,'"$version"',g' \
+    -e 's,@CMAKE_SIZEOF_VOID_P@,'"$bitness"',g'  >"${TEMPDIR}"/${tname} "${template}" || exit 20
+done
+)
+cp -r $TEMPDIR/. "${targetpath}"
diff --git a/utils/cmake/mercury/xenomai-targets-noconfig.cmake.in b/utils/cmake/mercury/xenomai-targets-noconfig.cmake.in
new file mode 100644
index 000000000..e3669c940
--- /dev/null
+++ b/utils/cmake/mercury/xenomai-targets-noconfig.cmake.in
@@ -0,0 +1,69 @@
+#----------------------------------------------------------------
+# Generated CMake target import file.
+#----------------------------------------------------------------
+
+# Commands may need to know the format version.
+set(CMAKE_IMPORT_FILE_VERSION 1)
+
+# Import target "Xenomai::mercury" for configuration ""
+set_property(TARGET Xenomai::mercury APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::mercury PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libmercury.so"
+  IMPORTED_SONAME_NOCONFIG "libmercury.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::mercury )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::mercury "${_IMPORT_PREFIX}/${_xenomai_libdir}/libmercury.so" )
+
+# Import target "Xenomai::copperplate" for configuration ""
+set_property(TARGET Xenomai::copperplate APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::copperplate PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libcopperplate.so"
+  IMPORTED_SONAME_NOCONFIG "libcopperplate.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::copperplate )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::copperplate "${_IMPORT_PREFIX}/${_xenomai_libdir}/libcopperplate.so" )
+
+# Import target "Xenomai::vxworks" for configuration ""
+set_property(TARGET Xenomai::vxworks APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::vxworks PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libvxworks.so"
+  IMPORTED_SONAME_NOCONFIG "libvxworks.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::vxworks )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::vxworks "${_IMPORT_PREFIX}/${_xenomai_libdir}/libvxworks.so" )
+
+# Import target "Xenomai::psos" for configuration ""
+set_property(TARGET Xenomai::psos APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::psos PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libpsos.so"
+  IMPORTED_SONAME_NOCONFIG "libpsos.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::psos )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::psos "${_IMPORT_PREFIX}/${_xenomai_libdir}/libpsos.so" )
+
+# Import target "Xenomai::alchemy" for configuration ""
+set_property(TARGET Xenomai::alchemy APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::alchemy PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libalchemy.so"
+  IMPORTED_SONAME_NOCONFIG "libalchemy.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::alchemy )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::alchemy "${_IMPORT_PREFIX}/${_xenomai_libdir}/libalchemy.so" )
+
+# Import target "Xenomai::smokey" for configuration ""
+set_property(TARGET Xenomai::smokey APPEND PROPERTY IMPORTED_CONFIGURATIONS NOCONFIG)
+set_target_properties(Xenomai::smokey PROPERTIES
+  IMPORTED_LOCATION_NOCONFIG "${_IMPORT_PREFIX}/${_xenomai_libdir}/libsmokey.so"
+  IMPORTED_SONAME_NOCONFIG "libsmokey.so"
+  )
+
+list(APPEND _IMPORT_CHECK_TARGETS Xenomai::smokey )
+list(APPEND _IMPORT_CHECK_FILES_FOR_Xenomai::smokey "${_IMPORT_PREFIX}/${_xenomai_libdir}/libsmokey.so" )
+
+# Commands beyond this point should not need to know the version.
+set(CMAKE_IMPORT_FILE_VERSION)
diff --git a/utils/cmake/mercury/xenomai-targets.cmake.in b/utils/cmake/mercury/xenomai-targets.cmake.in
new file mode 100644
index 000000000..1edf7bef1
--- /dev/null
+++ b/utils/cmake/mercury/xenomai-targets.cmake.in
@@ -0,0 +1,157 @@
+# Generated by CMake
+
+if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
+   message(FATAL_ERROR "CMake >= 2.6.0 required")
+endif()
+cmake_policy(PUSH)
+cmake_policy(VERSION 2.6)
+#----------------------------------------------------------------
+# Generated CMake target import file.
+#----------------------------------------------------------------
+
+# Commands may need to know the format version.
+set(CMAKE_IMPORT_FILE_VERSION 1)
+
+# Protect against multiple inclusion, which would fail when already imported targets are added once more.
+set(_targetsDefined)
+set(_targetsNotDefined)
+set(_expectedTargets)
+foreach(_expectedTarget Xenomai::mercury Xenomai::legacy_bootstrap Xenomai::legacy_bootstrap_wrap Xenomai::posix Xenomai::copperplate Xenomai::vxworks Xenomai::psos Xenomai::alchemy Xenomai::smokey)
+  list(APPEND _expectedTargets ${_expectedTarget})
+  if(NOT TARGET ${_expectedTarget})
+    list(APPEND _targetsNotDefined ${_expectedTarget})
+  endif()
+  if(TARGET ${_expectedTarget})
+    list(APPEND _targetsDefined ${_expectedTarget})
+  endif()
+endforeach()
+if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
+  unset(_targetsDefined)
+  unset(_targetsNotDefined)
+  unset(_expectedTargets)
+  set(CMAKE_IMPORT_FILE_VERSION)
+  cmake_policy(POP)
+  return()
+endif()
+if(NOT "${_targetsDefined}" STREQUAL "")
+  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
+endif()
+unset(_targetsDefined)
+unset(_targetsNotDefined)
+unset(_expectedTargets)
+
+
+# Compute the installation prefix relative to this file.
+get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_DIR}/../../@lib_to_prefix@" ABSOLUTE)
+if(_IMPORT_PREFIX STREQUAL "/")
+  set(_IMPORT_PREFIX "")
+endif()
+
+# Create imported target Xenomai::mercury
+add_library(Xenomai::mercury SHARED IMPORTED)
+
+set_target_properties(Xenomai::mercury PROPERTIES
+  INTERFACE_COMPILE_DEFINITIONS "__MERCURY__"
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/mercury;${_IMPORT_PREFIX}/${_xenomai_includedir}"
+  INTERFACE_LINK_LIBRARIES "${_xenomai_threadlib};-lrt"
+)
+
+# Create imported target Xenomai::legacy_bootstrap
+add_library(Xenomai::legacy_bootstrap INTERFACE IMPORTED)
+
+set_target_properties(Xenomai::legacy_bootstrap PROPERTIES
+  INTERFACE_LINK_LIBRARIES "\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:${_IMPORT_PREFIX}/${_xenomai_libdir}/xenomai/bootstrap-pic.o>;\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:${_IMPORT_PREFIX}/${_xenomai_libdir}/xenomai/bootstrap.o>"
+)
+
+# Create imported target Xenomai::legacy_bootstrap_wrap
+add_library(Xenomai::legacy_bootstrap_wrap INTERFACE IMPORTED)
+
+set_target_properties(Xenomai::legacy_bootstrap_wrap PROPERTIES
+  INTERFACE_LINK_LIBRARIES "\$<\$<STREQUAL:\$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:-Wl,--wrap=main,--dynamic-list=${_IMPORT_PREFIX}/${_xenomai_libdir}/dynlist.ld>"
+)
+
+# Create imported target Xenomai::posix
+add_library(Xenomai::posix INTERFACE IMPORTED)
+
+set_target_properties(Xenomai::posix PROPERTIES
+  INTERFACE_LINK_LIBRARIES "Xenomai::mercury"
+)
+
+# Create imported target Xenomai::copperplate
+add_library(Xenomai::copperplate SHARED IMPORTED)
+
+set_target_properties(Xenomai::copperplate PROPERTIES
+  INTERFACE_LINK_LIBRARIES "Xenomai::mercury"
+)
+
+# Create imported target Xenomai::vxworks
+add_library(Xenomai::vxworks SHARED IMPORTED)
+
+set_target_properties(Xenomai::vxworks PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/vxworks"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+# Create imported target Xenomai::psos
+add_library(Xenomai::psos SHARED IMPORTED)
+
+set_target_properties(Xenomai::psos PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/psos"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+# Create imported target Xenomai::alchemy
+add_library(Xenomai::alchemy SHARED IMPORTED)
+
+set_target_properties(Xenomai::alchemy PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/alchemy"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+# Create imported target Xenomai::smokey
+add_library(Xenomai::smokey SHARED IMPORTED)
+
+set_target_properties(Xenomai::smokey PROPERTIES
+  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/${_xenomai_includedir}/smokey"
+  INTERFACE_LINK_LIBRARIES "Xenomai::copperplate"
+)
+
+if(CMAKE_VERSION VERSION_LESS 3.0.0)
+  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
+endif()
+
+# Load information for each installed configuration.
+get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
+file(GLOB CONFIG_FILES "${_DIR}/xenomai-targets-*.cmake")
+foreach(f ${CONFIG_FILES})
+  include(${f})
+endforeach()
+
+# Cleanup temporary variables.
+set(_IMPORT_PREFIX)
+
+# Loop over all imported files and verify that they actually exist
+foreach(target ${_IMPORT_CHECK_TARGETS} )
+  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
+    if(NOT EXISTS "${file}" )
+      message(FATAL_ERROR "The imported target \"${target}\" references the file
+   \"${file}\"
+but this file does not exist.  Possible reasons include:
+* The file was deleted, renamed, or moved to another location.
+* An install or uninstall procedure did not complete successfully.
+* The installation package was faulty and contained
+   \"${CMAKE_CURRENT_LIST_FILE}\"
+but not all the files it references.
+")
+    endif()
+  endforeach()
+  unset(_IMPORT_CHECK_FILES_FOR_${target})
+endforeach()
+unset(_IMPORT_CHECK_TARGETS)
+
+# This file does not depend on other imported targets which have
+# been exported from the same project but in a separate export set.
+
+# Commands beyond this point should not need to know the version.
+set(CMAKE_IMPORT_FILE_VERSION)
+cmake_policy(POP)
diff --git a/utils/cmake/xenomai-config-version.cmake.in b/utils/cmake/xenomai-config-version.cmake.in
new file mode 100644
index 000000000..df856acd0
--- /dev/null
+++ b/utils/cmake/xenomai-config-version.cmake.in
@@ -0,0 +1,31 @@
+# This is a basic version file for the Config-mode of find_package().
+# It is used by write_basic_package_version_file() as input file for configure_file()
+# to create a version-file which can be installed along a config.cmake file.
+#
+# The created file sets PACKAGE_VERSION_EXACT if the current version string and
+# the requested version string are exactly the same and it sets
+# PACKAGE_VERSION_COMPATIBLE if the current version is >= requested version.
+# The variable CVF_VERSION must be set before calling configure_file().
+
+set(PACKAGE_VERSION "@CMAKE_VERSION_CODE@")
+
+if(PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
+  set(PACKAGE_VERSION_COMPATIBLE FALSE)
+else()
+  set(PACKAGE_VERSION_COMPATIBLE TRUE)
+  if(PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
+    set(PACKAGE_VERSION_EXACT TRUE)
+  endif()
+endif()
+
+# if the installed or the using project don't have CMAKE_SIZEOF_VOID_P set, ignore it:
+if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "" OR "@CMAKE_SIZEOF_VOID_P@" STREQUAL "")
+   return()
+endif()
+
+# check that the installed version has the same 32/64bit-ness as the one which is currently searching:
+if(NOT CMAKE_SIZEOF_VOID_P STREQUAL "@CMAKE_SIZEOF_VOID_P@")
+   math(EXPR installedBits "@CMAKE_SIZEOF_VOID_P@ * 8")
+   set(PACKAGE_VERSION "${PACKAGE_VERSION} (${installedBits}bit)")
+   set(PACKAGE_VERSION_UNSUITABLE TRUE)
+endif()
diff --git a/utils/cmake/xenomai-config.cmake.in b/utils/cmake/xenomai-config.cmake.in
new file mode 100644
index 000000000..6bc8ea727
--- /dev/null
+++ b/utils/cmake/xenomai-config.cmake.in
@@ -0,0 +1,45 @@
+
+####### Expanded from @PACKAGE_INIT@ by configure_package_config_file() #######
+####### Any changes to this file will be overwritten by the next CMake run ####
+####### The input file was xenomai-config.cmake.in                            ########
+
+get_filename_component(PACKAGE_PREFIX_DIR "${CMAKE_CURRENT_LIST_DIR}/../../@lib_to_prefix@" ABSOLUTE)
+
+macro(set_and_check _var _file)
+  set(${_var} "${_file}")
+  if(NOT EXISTS "${_file}")
+    message(FATAL_ERROR "File or directory ${_file} referenced by variable ${_var} does not exist !")
+  endif()
+endmacro()
+
+macro(check_required_components _NAME)
+  foreach(comp ${${_NAME}_FIND_COMPONENTS})
+    if(NOT ${_NAME}_${comp}_FOUND)
+      if(${_NAME}_FIND_REQUIRED_${comp})
+        set(${_NAME}_FOUND FALSE)
+      endif()
+    endif()
+  endforeach()
+endmacro()
+
+####################################################################################
+
+include(CMakeFindDependencyMacro)
+find_dependency(Threads)
+
+set(_xenomai_threadlib "Threads::Threads")
+if(CMAKE_VERSION VERSION_LESS 3.1)
+  set(_xenomai_threadlib "${CMAKE_THREAD_LIBS_INIT}")
+endif()
+
+set(_xenomai_includedir "@includedir_rel@")
+set(_xenomai_libdir "@libdir_rel@")
+
+include(${CMAKE_CURRENT_LIST_DIR}/xenomai-targets.cmake)
+check_required_components(Xenomai)
+
+include(${CMAKE_CURRENT_LIST_DIR}/xenomai-macros.cmake)
+
+unset(_xenomai_threadlib)
+unset(_xenomai_libdir)
+unset(_xenomai_includedir)
diff --git a/utils/cmake/xenomai-macros.cmake.in b/utils/cmake/xenomai-macros.cmake.in
new file mode 100644
index 000000000..0c4a60e48
--- /dev/null
+++ b/utils/cmake/xenomai-macros.cmake.in
@@ -0,0 +1,134 @@
+# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
+# file Copyright.txt or https://cmake.org/licensing for details.
+
+#[=======================================================================[.rst:
+XenomaiTargetBootstrap
+----------------------
+
+Minimal required CMake Version is 3.0, several features are only fully usable
+with 3.1
+#]=======================================================================]
+
+set(_XenomaiMacros_SELF "${CMAKE_CURRENT_LIST_FILE}")
+get_filename_component(_XenomaiMacros_SELF_DIR "${_XenomaiMacros_SELF}" PATH)
+
+if(CMAKE_VERSION VERSION_LESS 3.5)
+  include(CMakeParseArguments)
+endif()
+
+function(xenomai_target_bootstrap target)
+
+  set(_fileprefix "${CMAKE_CURRENT_BINARY_DIR}/generated/xenomai_bootstrap")
+  set(_fileinclude "#include \"xenomai_bootstrap_template.h\"\n")
+
+  set(_extradefines "#define _XENOMAI_BOOTSTRAP_WRAP_MALLOC\n#define _XENOMAI_BOOTSTRAP_GLIBC_CONSTRUCTORS\n")
+
+  file(WRITE "${_fileprefix}_main.c.tmp"
+      "#ifdef main\n#undef main\n#endif\n${_extradefines}#define _XENOMAI_BOOTSTRAP_DEFINE_MAINWRAPPER __real_main\n#define _XENOMAI_BOOTSTRAP_WEAKREF_MAINWRAPPER main\n${_fileinclude}"
+    )
+  file(WRITE "${_fileprefix}_shl.c.tmp"
+      "${_extradefines}#define _XENOMAI_BOOTSTRAP_DSO\n${_fileinclude}"
+    )
+  file(WRITE "${_fileprefix}.c.tmp"
+      "${_extradefines}${_fileinclude}"
+    )
+
+  execute_process(
+  	COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${_XenomaiMacros_SELF_DIR}/bootstrap-template.h" "${_fileprefix}_template.h"
+  	COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${_fileprefix}_main.c.tmp" "${_fileprefix}_main.c"
+  	COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${_fileprefix}_shl.c.tmp" "${_fileprefix}_shl.c"
+  	COMMAND "${CMAKE_COMMAND}" -E copy_if_different "${_fileprefix}.c.tmp" "${_fileprefix}.c"
+  )
+
+  get_target_property(ttype ${target} TYPE)
+
+  cmake_parse_arguments(XBS "NO_FALLBACK;MODECHK" "MAIN;MAIN_WRAP" "SKINS" ${ARGN})
+  set(_errors)
+
+  if(XBS_MAIN
+     AND NOT XBS_MAIN STREQUAL "NONE"
+     AND NOT XBS_MAIN STREQUAL "SOURCE"
+     AND NOT XBS_MAIN STREQUAL "PRECOMPILED")
+    set(_errors ${_errors}
+        "MAIN only support the values NONE, SOURCE and PRECOMPILED")
+  endif()
+  if(XBS_MAIN_WRAP
+     AND NOT XBS_MAIN_WRAP STREQUAL "NONE"
+     AND NOT XBS_MAIN_WRAP STREQUAL "MACRO"
+     AND NOT XBS_MAIN_WRAP STREQUAL "LINKER")
+    set(_errors ${_errors}
+        "XBS_MAIN_WRAP only support the values NONE, MACRO and LINKER")
+  endif()
+
+  # the default is not working on CMake 3.0, so fallback to the precompiled
+  # objects unless this was disabled
+  if(CMAKE_VERSION VERSION_LESS 3.1)
+    if(NOT XBS_MAIN OR XBS_MAIN STREQUAL "NONE" OR XBS_MAIN STREQUAL "SOURCE")
+      if(XBS_NO_FALLBACK)
+        set(_errors ${_errors}
+            "MAIN NONE and MAIN SOURCE need atleast CMake 3.1")
+      else()
+        if(ttype STREQUAL EXECUTABLE)
+          message(
+            WARNING
+              "xenomai_target_bootstrap: setting MAIN PRECOMPILED for ${target} (CMake Version less than 3.1)"
+            )
+        endif()
+        set(XBS_MAIN "PRECOMPILED")
+        if(NOT XBS_MAIN_WRAP
+           OR XBS_MAIN_WRAP STREQUAL "NONE"
+           OR XBS_MAIN_WRAP STREQUAL "MACRO")
+          set(XBS_MAIN_WRAP "LINKER")
+          if(ttype STREQUAL EXECUTABLE)
+            message(
+              WARNING
+                "xenomai_target_bootstrap: setting XBS_MAIN_WRAP LINKER for ${target} (CMake Version less than 3.1)"
+              )
+          endif()
+        endif()
+      endif()
+    endif()
+  endif()
+
+  if(_errors)
+    message(SEND_ERROR "xenomai_target_bootstrap: ${_errors}")
+    return()
+  endif()
+
+  if(XBS_MAIN STREQUAL "SOURCE")
+    target_sources(${target} PRIVATE
+      "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:${_fileprefix}_shl.c>"
+      "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:${_fileprefix}_main.c>")
+
+  elseif(XBS_MAIN STREQUAL "PRECOMPILED")
+    target_link_libraries(${target} PRIVATE Xenomai::legacy_bootstrap)
+
+  else()
+    target_sources(${target} PRIVATE
+      "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:${_fileprefix}_shl.c>"
+      "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:${_fileprefix}.c>")
+
+  endif()
+
+  if(XBS_MODECHK)
+  	target_link_libraries(${target} PRIVATE Xenomai::modechk)
+  endif()
+
+  if(XBS_MAIN_WRAP STREQUAL "MACRO")
+    target_compile_definitions(${target} PRIVATE
+      $<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:main=__real_main>)
+
+  elseif(XBS_MAIN_WRAP STREQUAL "LINKER")
+    target_link_libraries(${target} PRIVATE Xenomai::legacy_bootstrap_wrap)
+  endif()
+
+  set(_skins)
+  foreach(_skin ${XBS_SKINS})
+    string(TOLOWER ${_skin} _lbname)
+    set(_skins ${_skins} "Xenomai::${_lbname}")
+  endforeach()
+
+  if(_skins)
+    target_link_libraries(${target} PRIVATE ${_skins})
+  endif()
+endfunction()
-- 
2.20.1

